import { describe, it, expect, vi, beforeEach } from 'vitest';
import { FileUploadService } from '../../../client/src/services/fileUpload';

// Mock fetch
global.fetch = vi.fn();

describe('FileUploadService', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  describe('validateFile', () => {
    it('should accept valid file types', () => {
      const imageFile = new File([''], 'test.jpg', { type: 'image/jpeg' });
      const pdfFile = new File([''], 'test.pdf', { type: 'application/pdf' });
      
      expect(FileUploadService.validateFile(imageFile).isValid).toBe(true);
      expect(FileUploadService.validateFile(pdfFile).isValid).toBe(true);
    });

    it('should reject invalid file types', () => {
      const execFile = new File([''], 'test.exe', { type: 'application/exe' });
      
      expect(FileUploadService.validateFile(execFile).isValid).toBe(false);
    });

    it('should reject files that are too large', () => {
      const largeFile = new File(['x'.repeat(6 * 1024 * 1024)], 'large.jpg', { type: 'image/jpeg' });
      
      expect(FileUploadService.validateFile(largeFile).isValid).toBe(false);
    });

    it('should accept files within size limit', () => {
      const smallFile = new File(['x'.repeat(1024)], 'small.jpg', { type: 'image/jpeg' });
      
      expect(FileUploadService.validateFile(smallFile).isValid).toBe(true);
    });
  });

  describe('formatFileSize', () => {
    it('should format bytes correctly', () => {
      expect(FileUploadService.formatFileSize(0)).toBe('0 Bytes');
      expect(FileUploadService.formatFileSize(1024)).toBe('1 KB');
      expect(FileUploadService.formatFileSize(1024 * 1024)).toBe('1 MB');
      expect(FileUploadService.formatFileSize(1024 * 1024 * 1024)).toBe('1 GB');
    });

    it('should format decimal values', () => {
      expect(FileUploadService.formatFileSize(1536)).toBe('1.5 KB');
      expect(FileUploadService.formatFileSize(1048576 * 1.5)).toBe('1.5 MB');
    });
  });

  describe('compressImage', () => {
    it('should return non-image files unchanged', async () => {
      const pdfFile = new File(['pdf content'], 'test.pdf', { type: 'application/pdf' });
      
      const result = await FileUploadService.compressImage(pdfFile);
      
      expect(result).toBe(pdfFile);
    });

    it('should compress image files', async () => {
      // Create a mock image file
      const imageFile = new File(['image data'], 'test.jpg', { type: 'image/jpeg' });
      
      // Mock canvas and context
      const mockCanvas = {
        toBlob: vi.fn((callback) => {
          const blob = new Blob(['compressed'], { type: 'image/jpeg' });
          callback(blob);
        }),
        getContext: vi.fn(() => ({
          drawImage: vi.fn(),
        })),
        width: 0,
        height: 0,
      };

      const mockImage = {
        onload: null,
        onerror: null,
        src: '',
        width: 100,
        height: 100,
      };

      // Mock DOM methods
      vi.stubGlobal('document', {
        createElement: vi.fn((tag) => {
          if (tag === 'canvas') return mockCanvas;
          if (tag === 'img') return mockImage;
          return {};
        }),
      });

      vi.stubGlobal('URL', {
        createObjectURL: vi.fn(() => 'blob:url'),
        revokeObjectURL: vi.fn(),
      });

      const result = await FileUploadService.compressImage(imageFile);
      
      // Trigger the onload event
      setTimeout(() => {
        if (mockImage.onload) (mockImage.onload as any)();
      }, 0);

      expect(result).toBeInstanceOf(File);
    });
  });

  describe('uploadFile', () => {
    it('should upload file successfully', async () => {
      const mockFile = new File(['content'], 'test.jpg', { type: 'image/jpeg' });
      const mockResponse = {
        ok: true,
        json: vi.fn().mockResolvedValue({
          fileUrl: 'https://example.com/file.jpg',
          fileName: 'test.jpg',
        }),
      };

      (global.fetch as any).mockResolvedValue(mockResponse);

      const progressCallback = vi.fn();
      const result = await FileUploadService.uploadFile(
        mockFile,
        { workOrderId: 'wo-123' },
        {},
        progressCallback
      );

      expect(result.success).toBe(true);
      expect(result.fileUrl).toBe('https://example.com/file.jpg');
      expect(result.fileName).toBe('test.jpg');
      expect(progressCallback).toHaveBeenCalled();
    });

    it('should handle upload failure', async () => {
      const mockFile = new File(['content'], 'test.jpg', { type: 'image/jpeg' });
      const mockResponse = {
        ok: false,
        status: 500,
        statusText: 'Server Error',
      };

      (global.fetch as any).mockResolvedValue(mockResponse);

      const result = await FileUploadService.uploadFile(
        mockFile,
        { workOrderId: 'wo-123' },
        {}
      );

      expect(result.success).toBe(false);
      expect(result.error).toBe('Upload failed: 500 Server Error');
    });

    it('should handle network errors', async () => {
      const mockFile = new File(['content'], 'test.jpg', { type: 'image/jpeg' });
      
      (global.fetch as any).mockRejectedValue(new Error('Network error'));

      const result = await FileUploadService.uploadFile(
        mockFile,
        { workOrderId: 'wo-123' },
        {}
      );

      expect(result.success).toBe(false);
      expect(result.error).toBe('Network error');
    });

    it('should reject invalid files', async () => {
      const invalidFile = new File([''], 'test.exe', { type: 'application/exe' });

      const result = await FileUploadService.uploadFile(
        invalidFile,
        { workOrderId: 'wo-123' },
        {}
      );

      expect(result.success).toBe(false);
      expect(result.error).toContain('File type application/exe is not allowed');
    });
  });

  describe('deleteFile', () => {
    it('should delete file successfully', async () => {
      const mockResponse = {
        ok: true,
        json: vi.fn().mockResolvedValue({ success: true }),
      };

      (global.fetch as any).mockResolvedValue(mockResponse);

      const result = await FileUploadService.deleteFile('file-123');

      expect(result).toBe(true);
      expect(global.fetch).toHaveBeenCalledWith('/api/attachments/file-123', {
        method: 'DELETE',
      });
    });

    it('should handle delete failure', async () => {
      const mockResponse = {
        ok: false,
        status: 404,
        statusText: 'Not Found',
      };

      (global.fetch as any).mockResolvedValue(mockResponse);

      const result = await FileUploadService.deleteFile('file-123');

      expect(result).toBe(false);
    });
  });

  describe('generatePreview', () => {
    it('should generate preview successfully', async () => {
      const fileUrl = 'https://example.com/file.jpg';
      
      const result = await FileUploadService.generatePreview(fileUrl);

      expect(result.success).toBe(true);
      expect(result.previewUrl).toBe(fileUrl);
    });

    it('should handle preview generation errors', async () => {
      // Test with invalid URL or other error conditions
      const result = await FileUploadService.generatePreview('');

      expect(result.success).toBe(true); // Current implementation always succeeds
      expect(result.previewUrl).toBe('');
    });
  });
});
